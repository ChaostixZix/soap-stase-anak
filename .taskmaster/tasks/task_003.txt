# Task ID: 3
# Title: Server routes: hospitals, bangsal, patients, SOAP CRUD
# Status: pending
# Dependencies: None
# Priority: high
# Description: Add SvelteKit server routes with Zod validation for managing hospitals, bangsal, patients, and SOAP entries.
# Details:
Implement REST-ish endpoints for list/create/update/delete hospitals and bangsal, manage patients (with search by name), and SOAP read/write for latest record and plan items. Centralize DB access in lib/db.ts and input schemas in lib/types.ts.

# Test Strategy:
Unit test validation schemas; manual CRUD through API and UI; ensure RLS errors are handled gracefully.

# Subtasks:
## 1. Establish Server-Side DB Access and Core Zod Schemas [pending]
### Dependencies: None
### Description: Create the foundational files for database access and data validation. This includes setting up a server-side Supabase client and defining the primary Zod schemas for the application's data models.
### Details:
Create `src/lib/db.ts` to initialize and export a server-side Supabase client, using environment variables for the service role key. Create `src/lib/types.ts` and define Zod schemas for `Hospital`, `Bangsal`, `Patient`, and `SOAP` entities. These schemas will be used for input validation in all subsequent API endpoints.

## 2. Implement Hospital CRUD API Endpoints [pending]
### Dependencies: 3.1
### Description: Develop the SvelteKit server routes to perform Create, Read, Update, and Delete (CRUD) operations for hospitals.
### Details:
Create `src/routes/api/hospitals/+server.ts` to handle `GET` (list all) and `POST` (create new). Create `src/routes/api/hospitals/[id]/+server.ts` for `GET` (fetch one), `PUT` (update), and `DELETE`. Use the `hospitalSchema` from `src/lib/types.ts` for request body validation.

## 3. Implement Bangsal CRUD API Endpoints [pending]
### Dependencies: 3.1
### Description: Develop the server routes for managing `bangsal` (wards), which are associated with hospitals.
### Details:
Create `src/routes/api/bangsal/+server.ts` to handle `POST` (create). Implement listing via `GET /api/bangsal?hospital_id={uuid}`. Create `src/routes/api/bangsal/[id]/+server.ts` for `PUT` (update) and `DELETE`. Ensure all operations validate against the `bangsalSchema` and correctly handle the `hospital_id` foreign key.

## 4. Implement Patient Management and Search API Endpoints [pending]
### Dependencies: 3.1
### Description: Create API endpoints for patient CRUD operations, including a specialized search function.
### Details:
Create `src/routes/api/patients/+server.ts` for `POST` (create) and `GET` (list with filtering by `hospital_id` and `bangsal_id`). Implement a text-based search on patient names using Supabase's `ilike` operator. Create `src/routes/api/patients/[id]/+server.ts` for `PUT` (update). Validate all inputs with the `patientSchema`.

## 5. Implement Core SOAP Record Read/Write API Endpoints [pending]
### Dependencies: 3.1, 3.4
### Description: Build the API endpoints for creating, reading, and updating the main sections (Subjective, Objective, Assessment) of a patient's SOAP record.
### Details:
Create `src/routes/api/patients/[patient_id]/soap/latest/+server.ts` to handle `GET` requests for the most recent SOAP record. Implement `POST` on `src/routes/api/patients/[patient_id]/soap` to create a new SOAP entry. Create `src/routes/api/soap/[soap_id]/+server.ts` to handle `PUT` requests for updating the S, O, and A fields. Use the `soapSchema` for validation.

## 6. Implement SOAP Plan Management and Centralized Error Handling [pending]
### Dependencies: 3.2, 3.3, 3.4, 3.5
### Description: Add functionality for managing the 'Plan' section of a SOAP note and implement robust, centralized error handling across all new API routes.
### Details:
Create an endpoint, e.g., `POST /api/soap/[soap_id]/plan-items`, to append a new item to the plan's JSONB array. Implement a separate endpoint or function to recompute plan item statuses. Create a utility in `src/lib/server/utils.ts` to map Supabase errors (e.g., PostgREST, RLS) to SvelteKit `error()` responses (4xx/5xx) and refactor all previously created endpoints to use it.

